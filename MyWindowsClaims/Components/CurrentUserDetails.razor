@inject Microsoft.AspNetCore.Http.IHttpContextAccessor contextAccessor
@using System.Security.Claims;
@using System.Security.Principal;
@using System.Runtime.Versioning 
@attribute  [SupportedOSPlatform("windows")]

<h3>Details of current user from HTTP context</h3>

<p>User Name: @_identity.Name</p>
<p>Is authenticated? @(_identity.IsAuthenticated ? "Yes" : "No")</p>
<p>Authentication type: @_identity.AuthenticationType</p>
<p>There are @_claims.Count claims for current user:</p>
<table>
    <thead align="left">
        <tr>
            <th>Claim Value</th>
            <th>Claim Type</th>
            <th>Well known SID type</th>
            <th>Account (user or group)</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var claim in _claims)
        {
        <tr>
            @{
                var sidInfo = GetSidInfo(claim.Value);
            }
            <td>@claim.Value</td>
            <td>@claim.Type.Split('/').Last()</td>
            <td>@sidInfo.KnownType</td>
            <td>@sidInfo.Account</td>
        </tr>
        }
    </tbody>
</table>

@code {
    private ClaimsPrincipal _currentUser;
    private IIdentity _identity;
    private List<Claim> _claims;

    private WellKnownSidType[] WellKnownSids = (WellKnownSidType[])Enum.GetValues(typeof(WellKnownSidType));

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _currentUser = contextAccessor.HttpContext.User;
        _identity = _currentUser.Identity;
        _claims = _currentUser.Claims?.ToList();
    }

    /// <summary>
    /// Provide details related to a given security identifier (SID).
    /// </summary>
    /// <param name="sidValue">A string representation of a SID, such as the Value property of a claim.</param>
    /// <returns>A tuple containing a well known SID type and an account (user or group associated with the SID); null in case parameter does not represent a SID.)</returns>
    private (WellKnownSidType KnownType, IdentityReference Account)? GetSidDetails(string sidValue)
    {
        SecurityIdentifier sid;
        try { sid = new SecurityIdentifier(sidValue); }
        catch { return null; }
        return (WellKnownSids.FirstOrDefault(s => sid.IsWellKnown(s)), sid.Translate(typeof(NTAccount)));
    }

   /// <summary>
   /// Wrapper over GetSidDetails that translates the well known SID type and an account to their string represenations (or &lt;n/a&gt;'s if passed string is not a SID).
   /// </summary>
   /// <param name="sidValue"></param>
   /// <returns>A tuple containing string represenations of a well known SID type and an account (user or group).</returns>
    private (string KnownType, string Account) GetSidInfo(string sidValue)
    {
        var sidDetails = GetSidDetails(sidValue);
        string GetSidDetailsIfAny(Func<string> func) => sidDetails == null ? "<n/a>" : func(); //local, higher-order function
        return (GetSidDetailsIfAny(() => sidDetails.Value.KnownType.ToString()),
                GetSidDetailsIfAny(() => sidDetails.Value.Account.Value));
    }
}
